<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/TestFlight.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/TestFlight</TokenIdentifier>
			<Abstract type="html">TestFlight object
All methods are class level</Abstract>
			<DeclaredIn>TestFlight.h</DeclaredIn>
			
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/TestFlight/addCustomEnvironmentInformation:forKey:</TokenIdentifier>
			<Abstract type="html">Add custom environment information
If you want to track custom information such as a user name from your application you can add it here</Abstract>
			<DeclaredIn>TestFlight.h</DeclaredIn>			
			
			<Declaration>+ (void)addCustomEnvironmentInformation:(NSString *)information forKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>information</Name>
					<Abstract type="html">A string containing the environment you are storing</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">The key to store the information with</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addCustomEnvironmentInformation:forKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/TestFlight/takeOff:</TokenIdentifier>
			<Abstract type="html">Starts a TestFlight session</Abstract>
			<DeclaredIn>TestFlight.h</DeclaredIn>			
			
			<Declaration>+ (void)takeOff:(NSString *)teamToken</Declaration>
			<Parameters>
				<Parameter>
					<Name>teamToken</Name>
					<Abstract type="html">Will be your team token obtained from https://testflightapp.com/dashboard/team/edit/</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/takeOff:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/TestFlight/setOptions:</TokenIdentifier>
			<Abstract type="html">Sets custom options</Abstract>
			<DeclaredIn>TestFlight.h</DeclaredIn>			
			
			<Declaration>+ (void)setOptions:(NSDictionary *)options</Declaration>
			<Parameters>
				<Parameter>
					<Name>options</Name>
					<Abstract type="html">NSDictionary containing the options you want to set available options are described below

Option                      Accepted Values                 Description
reinstallCrashHandlers      [ NSNumber numberWithBool:YES ] Reinstalls crash handlers, to be used if a third party
library installs crash handlers overtop of the TestFlight Crash Handlers
logToConsole                [ NSNumber numberWithBool:YES ] YES - default, sends log statements to Apple System Log and TestFlight log
NO  - sends log statements to TestFlight log only
logToSTDERR                 [ NSNumber numberWithBool:YES ] YES - default, sends log statements to STDERR when debugger is attached
NO  - sends log statements to TestFlight log only
sendLogOnlyOnCrash          [ NSNumber numberWithBool:YES ] NO  - default, sends logs to TestFlight at the end of every session
YES - sends logs statements to TestFlight only if there was a crash</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setOptions:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/TestFlight/passCheckpoint:</TokenIdentifier>
			<Abstract type="html">Track when a user has passed a checkpoint after the flight has taken off. Eg. passed level 1, posted high score</Abstract>
			<DeclaredIn>TestFlight.h</DeclaredIn>			
			
			<Declaration>+ (void)passCheckpoint:(NSString *)checkpointName</Declaration>
			<Parameters>
				<Parameter>
					<Name>checkpointName</Name>
					<Abstract type="html">The name of the checkpoint, this should be a static string</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/passCheckpoint:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/TestFlight/openFeedbackView</TokenIdentifier>
			<Abstract type="html">Opens a feedback window that is not attached to a checkpoint</Abstract>
			<DeclaredIn>TestFlight.h</DeclaredIn>			
			
			<Declaration>+ (void)openFeedbackView</Declaration>
			
			
			<Anchor>//api/name/openFeedbackView</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/TestFlight/submitFeedback:</TokenIdentifier>
			<Abstract type="html">Submits custom feedback to the site. Sends the data in feedback to the site. This is to be used as the method to submit
feedback from custom feedback forms.</Abstract>
			<DeclaredIn>TestFlight.h</DeclaredIn>			
			
			<Declaration>+ (void)submitFeedback:(NSString *)feedback</Declaration>
			<Parameters>
				<Parameter>
					<Name>feedback</Name>
					<Abstract type="html">Your users feedback, method does nothing if feedback is nil</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/submitFeedback:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/TestFlight/setDeviceIdentifier:</TokenIdentifier>
			<Abstract type="html">Sets the Device Identifier.
The SDK no longer obtains the device unique identifier. This method should only be used during testing so that you can
identify a testers test data with them. If you do not provide the identifier you will still see all session data, with checkpoints
and logs, but the data will be anonymized.
It is recommended that you only use this method during testing. We also recommended that you wrap this method with a pre-processor
directive that is only active for non-app store builds.
#ifndef RELEASE
[TestFlight setDeviceIdentifier:[[UIDevice currentDevice] uniqueIdentifier]];
#endif</Abstract>
			<DeclaredIn>TestFlight.h</DeclaredIn>			
			
			<Declaration>+ (void)setDeviceIdentifier:(NSString *)deviceIdentifer</Declaration>
			<Parameters>
				<Parameter>
					<Name>deviceIdentifier</Name>
					<Abstract type="html">The current devices device identifier</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDeviceIdentifier:</Anchor>
		</Token>
		
	</File>
</Tokens>