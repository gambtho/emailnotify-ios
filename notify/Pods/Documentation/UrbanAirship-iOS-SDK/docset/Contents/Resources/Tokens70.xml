<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/UALocationEvent.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/UALocationEvent</TokenIdentifier>
			<Abstract type="html">A UALocationEvent captures all the necessary information for
UAAnalytics</Abstract>
			<DeclaredIn>UALocationEvent.h</DeclaredIn>
			
			<NodeRef refid="70"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UALocationEvent/initWithLocationContext:</TokenIdentifier>
			<Abstract type="html">Create a UALocationEvent</Abstract>
			<DeclaredIn>UALocationEvent.h</DeclaredIn>			
			
			<Declaration>- (id)initWithLocationContext:(NSDictionary *)context</Declaration>
			<Parameters>
				<Parameter>
					<Name>context</Name>
					<Abstract type="html">A dictionary populated with all required data</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A UALocationEvent populated with appropriate values</Abstract></ReturnValue>
			<Anchor>//api/name/initWithLocationContext:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UALocationEvent/initWithLocation:provider:andUpdateType:</TokenIdentifier>
			<Abstract type="html">Creates a UALocationEvent parsing the necessary data from the method parameters</Abstract>
			<DeclaredIn>UALocationEvent.h</DeclaredIn>			
			
			<Declaration>- (id)initWithLocation:(CLLocation *)location provider:(id&lt;UALocationProviderProtocol&gt;)provider andUpdateType:(UALocationEventUpdateType *)updateType</Declaration>
			<Parameters>
				<Parameter>
					<Name>location</Name>
					<Abstract type="html">Location going to UAAnalytics</Abstract>
				</Parameter><Parameter>
					<Name>provider</Name>
					<Abstract type="html">Provider that produced the location</Abstract>
				</Parameter><Parameter>
					<Name>updateType</Name>
					<Abstract type="html">One of the UALocationEvent updated types, see header for more details</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">UALocationEvent populated with the necessary values</Abstract></ReturnValue>
			<Anchor>//api/name/initWithLocation:provider:andUpdateType:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UALocationEvent/initWithLocation:locationManager:andUpdateType:</TokenIdentifier>
			<Abstract type="html">Creates a UALocationEvent parsing the necessary data form the method parameters.</Abstract>
			<DeclaredIn>UALocationEvent.h</DeclaredIn>			
			
			<Declaration>- (id)initWithLocation:(CLLocation *)location locationManager:(CLLocationManager *)locationManager andUpdateType:(UALocationEventUpdateType *)updateType</Declaration>
			<Parameters>
				<Parameter>
					<Name>location</Name>
					<Abstract type="html">Location going to UAAnalytics</Abstract>
				</Parameter><Parameter>
					<Name>locationManager</Name>
					<Abstract type="html">The location manager that produced the location</Abstract>
				</Parameter><Parameter>
					<Name>updateType</Name>
					<Abstract type="html">One of the UALocationEvent updated types, see header for more details</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">UALocationEvent populated with the necessary values</Abstract></ReturnValue>
			<Anchor>//api/name/initWithLocation:locationManager:andUpdateType:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/UALocationEvent/locationEventWithLocation:provider:andUpdateType:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>UALocationEvent.h</DeclaredIn>			
			
			<Declaration>+ (UALocationEvent *)locationEventWithLocation:(CLLocation *)location provider:(id&lt;UALocationProviderProtocol&gt;)provider andUpdateType:(UALocationEventUpdateType *)updateType</Declaration>
			
			
			<Anchor>//api/name/locationEventWithLocation:provider:andUpdateType:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/UALocationEvent/locationEventWithLocation:locationManager:andUpdateType:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>UALocationEvent.h</DeclaredIn>			
			
			<Declaration>+ (UALocationEvent *)locationEventWithLocation:(CLLocation *)loction locationManager:(CLLocationManager *)locationManager andUpdateType:(UALocationEventUpdateType *)updateType</Declaration>
			
			
			<Anchor>//api/name/locationEventWithLocation:locationManager:andUpdateType:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UALocationEvent/populateDictionary:withLocationValues:</TokenIdentifier>
			<Abstract type="html">Creates a dictionary with the appropriate data gathered from the CLLocation</Abstract>
			<DeclaredIn>UALocationEvent.h</DeclaredIn>			
			
			<Declaration>- (void)populateDictionary:(NSMutableDictionary *)dictionary withLocationValues:(CLLocation *)location</Declaration>
			<Parameters>
				<Parameter>
					<Name>dictionary</Name>
					<Abstract type="html">The dictionary to populate with values</Abstract>
				</Parameter><Parameter>
					<Name>location</Name>
					<Abstract type="html">Location to parse values from</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/populateDictionary:withLocationValues:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UALocationEvent/populateDictionary:withLocationManagerValues:</TokenIdentifier>
			<Abstract type="html">Creates a dictionary with the appropriate data gathered from the CLLocationManager</Abstract>
			<DeclaredIn>UALocationEvent.h</DeclaredIn>			
			
			<Declaration>- (void)populateDictionary:(NSMutableDictionary *)dictionary withLocationManagerValues:(CLLocationManager *)locationManager</Declaration>
			<Parameters>
				<Parameter>
					<Name>dictionary</Name>
					<Abstract type="html">The dictionary to populate with values</Abstract>
				</Parameter><Parameter>
					<Name>locationManager</Name>
					<Abstract type="html">The location manager to parse values from</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/populateDictionary:withLocationManagerValues:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UALocationEvent/populateDictionary:withLocationProviderValues:</TokenIdentifier>
			<Abstract type="html">Creates a dictionary with the appropriate data gathered from the object conforming to the UALocationProviderProtocol</Abstract>
			<DeclaredIn>UALocationEvent.h</DeclaredIn>			
			
			<Declaration>- (void)populateDictionary:(NSMutableDictionary *)dictionary withLocationProviderValues:(id&lt;UALocationProviderProtocol&gt;)locationProvider</Declaration>
			<Parameters>
				<Parameter>
					<Name>dictionary</Name>
					<Abstract type="html">The dictionary to populate with values</Abstract>
				</Parameter><Parameter>
					<Name>locationProvider</Name>
					<Abstract type="html">The object implementing the UALocationProviderProtocol to parse data from</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/populateDictionary:withLocationProviderValues:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UALocationEvent/stringFromDoubleToSevenDigits:</TokenIdentifier>
			<Abstract type="html">Converts a double to a string keeping seven digit of precision
Seven digits produces sub meter accuracy at the equator.
http://en.wikipedia.org/wiki/Decimal_degrees</Abstract>
			<DeclaredIn>UALocationEvent.h</DeclaredIn>			
			
			<Declaration>- (NSString *)stringFromDoubleToSevenDigits:(double)doubleValue</Declaration>
			<Parameters>
				<Parameter>
					<Name>doubleValue</Name>
					<Abstract type="html">The double to convert.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">NSString representing the 7 digit value</Abstract></ReturnValue>
			<Anchor>//api/name/stringFromDoubleToSevenDigits:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UALocationEvent/stringAsIntFromDouble:</TokenIdentifier>
			<Abstract type="html">Converts a double to a string and truncating it
to an int.</Abstract>
			<DeclaredIn>UALocationEvent.h</DeclaredIn>			
			
			<Declaration>- (NSString *)stringAsIntFromDouble:(double)doubleValue</Declaration>
			<Parameters>
				<Parameter>
					<Name>doubleValue</Name>
					<Abstract type="html">The double to convert and truncate</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">NSString representing the double as an int</Abstract></ReturnValue>
			<Anchor>//api/name/stringAsIntFromDouble:</Anchor>
		</Token>
		
	</File>
</Tokens>